@page "/import"

@using OpenBudgeteer.Core.ViewModels
@using Microsoft.EntityFrameworkCore
@using OpenBudgeteer.Contracts.Models
@using OpenBudgeteer.Core.Common
@using OpenBudgeteer.Data
@using Tewr.Blazor.FileReader
@inject DbContextOptions<DatabaseContext> DbContextOptions
@inject IFileReaderService FileReaderService
@inject IJSRuntime JSRuntime

<div class="accordion" id="accordionSteps">
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingStepOne">
            <button @ref="_step1AccordionButtonElement" class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseStepOne" aria-expanded="true" aria-controls="collapseStepOne">
                Step 1: Select File
            </button>
        </h2>
        <div id="collapseStepOne" class="accordion-collapse collapse show" aria-labelledby="headingStepOne" data-bs-parent="#accordionSteps">
            <div class="row accordion-body">
                <div class="row">
                    <div class="col">
                        <input class="form-control" id="fileUpload" type="file" @ref=_inputElement>
                    </div>
                    <div class="col-md-auto">
                        <button class="btn btn-primary" type="button" @onclick=ReadFileAsync>Open File</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingStepTwo">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseStepTwo" aria-expanded="false" aria-controls="collapseStepTwo" disabled="@(!_step2Enabled)">
                @if (_step2Enabled)
                {
                    <div>Step 2: Select Import Profile</div>
                }
                else
                {
                    <div>Step 2: Select Import Profile (disabled)</div>
                }
            </button>
        </h2>
        <div id="collapseStepTwo" class="accordion-collapse collapse" aria-labelledby="headingStepTwo" data-bs-parent="#accordionSteps">
            <div class="accordion-body">
                <div class="mb-3">
                    @if (_step4Enabled)
                    {
                        <button class="btn btn-sm btn-primary header-action-button" @onclick=@(() => HandleResult(_dataContext.CreateProfile(), "Profile has been created."))>Create Profile</button>
                    }
                    @if (_dataContext.SelectedImportProfile.ImportProfileId != Guid.Empty)
                    {
                        <button class="btn btn-sm btn-primary header-action-button" @onclick=@(() => HandleResult(_dataContext.SaveProfile(), "Changes for Profile have been saved."))>Save Profile</button>
                        <button class="btn btn-sm btn-danger header-action-button" @onclick=@(() => _isDeleteConfirmationDialogVisible = true)>Delete Profile</button>
                    }
                </div>
                <div class="row mb-3">
                    <div class="col">
                        <label class="form-label">Import Profile:</label>
                        <select class="form-select form-select-sm"
                                @bind:get="_dataContext.SelectedImportProfile.ImportProfileId.ToString()"
                                @bind:set="(value) => { _dataContext.SelectedImportProfile = _dataContext.AvailableImportProfiles.FirstOrDefault(i => i.ImportProfileId == Guid.Parse(value), _dummyImportProfile); ImportProfile_SelectionChanged(); }">
                            @foreach (var importProfile in _dataContext.AvailableImportProfiles)
                            {
                                <option value="@importProfile.ImportProfileId">@importProfile.ProfileName</option>
                            }
                        </select>
                    </div>
			        <div class="col">
                        <label class="form-label">Profile Name:</label>
                        <input class="form-control form-control-sm" type="text" @bind="_dataContext.SelectedImportProfile.ProfileName"/>
                    </div>
                    <div class="col">
                        <label class="form-label">Target Account:</label>
                        <select class="form-select form-select-sm"
                                @bind:get="_dataContext.SelectedAccount.AccountId.ToString()"
                                @bind:set="(value) => { _dataContext.SelectedAccount = _dataContext.AvailableAccounts.FirstOrDefault(i => i.AccountId == Guid.Parse(value), _dummyAccount); TargetAccount_SelectionChanged(); }">
                            @foreach (var account in _dataContext.AvailableAccounts)
                            {
                                <option value="@account.AccountId">@account.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col">
                        <label class="form-label">Delimiter:</label>
                        <input class="form-control form-control-sm" type="text" @bind="_dataContext.SelectedImportProfile.Delimiter"/>
                    </div>
                    <div class="col">
                        <label class="form-label">Text qualifier:</label>
                        <input class="form-control form-control-sm" type="text" @bind="_dataContext.SelectedImportProfile.TextQualifier"/>
                    </div>
                    <div class="col">
                        <label class="form-label">Date format:</label>
                        <input class="form-control form-control-sm" type="text" @bind="_dataContext.SelectedImportProfile.DateFormat"/>
                        <p><small>e.g. yyyy-MM-dd, dd.MM.yyyy, MM/dd/yyyy</small></p>
                    </div>
                    <div class="col">
                        <label class="form-label">Number format:</label>
                        <input class="form-control form-control-sm" type="text" @bind="_dataContext.SelectedImportProfile.NumberFormat"/>
                        <p><small>Use BCP 47 language tag like en-US or de-DE</small></p>
                    </div>
                    <div class="col">
                        <div class="row">
                            <div class="col">
                                <label class="form-label">Header Row:</label>
                                <input class="form-control form-control-sm" type="number" @bind="_dataContext.SelectedImportProfile.HeaderRow"/>
                            </div>
                            <div class="col-auto align-self-end">
                                <button class="btn btn-sm btn-primary" style="margin-top: 5px" @onclick=LoadHeaders>Load Header</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingStepThree">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseStepThree" aria-expanded="false" aria-controls="collapseStepThree" disabled="@(!_step3Enabled)">
                @if (_step3Enabled)
                {
                    <div>Step 3: Modify Column Mapping</div>
                }
                else
                {
                    <div>Step 3: Modify Column Mapping (disabled)</div>
                }
            </button>
        </h2>
        <div id="collapseStepThree" class="accordion-collapse collapse" aria-labelledby="headingStepThree" data-bs-parent="#accordionSteps">
            <div class="accordion-body">
                <div class="row mb-3">
                    <div class="col">
                        <label class="form-label">Transaction Date:</label>
                        <select class="form-select form-select-sm"
                                @bind:get="_dataContext.SelectedImportProfile.TransactionDateColumnName"
                                @bind:set="(value) => { _dataContext.SelectedImportProfile.TransactionDateColumnName = value; CheckColumnMapping(); }">
                            @foreach (var column in _dataContext.IdentifiedColumns)
                            {
                                <option value="@column">@column</option>
                            }
                        </select>
                    </div>
                    <div class="col">
                        <label class="form-label">Payee (optional):</label>
                        <select class="form-select form-select-sm"
                                @bind:get="_dataContext.SelectedImportProfile.PayeeColumnName"
                                @bind:set="(value) => { _dataContext.SelectedImportProfile.PayeeColumnName = value; }">
                            @foreach (var column in _dataContext.IdentifiedColumns)
                            {
                                <option value="@column">@column</option>
                            }
                        </select>
                    </div>
                    <div class="col">
                        <label class="form-label">Memo:</label>
                        <select class="form-select form-select-sm"
                                @bind:get="_dataContext.SelectedImportProfile.MemoColumnName"
                                @bind:set="(value) => { _dataContext.SelectedImportProfile.MemoColumnName = value; CheckColumnMapping(); }">
                            @foreach (var column in _dataContext.IdentifiedColumns)
                            {
                                <option value="@column">@column</option>
                            }
                        </select>
                    </div>
                    <div class="col">
                        <label class="form-label">Amount / Debit:</label>
                        <select class="form-select form-select-sm"
                                @bind:get="_dataContext.SelectedImportProfile.AmountColumnName"
                                @bind:set="(value) => { _dataContext.SelectedImportProfile.AmountColumnName = value; CheckColumnMapping(); }">
                            @foreach (var column in _dataContext.IdentifiedColumns)
                            {
                                <option value="@column">@column</option>
                            }
                        </select>
                    </div>
                </div>
                <h5>Additional Mapping Settings:</h5>
                <div class="row">
                    <div class="col-6">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="inlineRadioOptions" value="0" 
                                checked="@_dataContext.SelectedImportProfile.AdditionalSettingCreditValue.Equals(0)"
                                @onchange=@AdditionalSettingCreditValue_SelectionChanged>
                            <label class="form-check-label">No special settings for Debit and Credit</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="inlineRadioOptions" value="1"
                                checked="@_dataContext.SelectedImportProfile.AdditionalSettingCreditValue.Equals(1)"
                                @onchange=@AdditionalSettingCreditValue_SelectionChanged>
                            <label class="form-check-label">Credit values are in separate columns</label>
                         </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="inlineRadioOptions" value="2"
                                checked="@_dataContext.SelectedImportProfile.AdditionalSettingCreditValue.Equals(2)"
                                @onchange=@AdditionalSettingCreditValue_SelectionChanged>
                            <label class="form-check-label">Debit and Credit values are in the same column but always positive</label>
                        </div>
                    </div>
                    @switch (_dataContext.SelectedImportProfile.AdditionalSettingCreditValue)
                    {
                        case 1:
                            <div class="col-3">
                                <label class="form-label">Credit:</label>
                                <select class="form-select form-select-sm"
                                        @bind:get="_dataContext.SelectedImportProfile.CreditColumnName"
                                        @bind:set="(value) => { _dataContext.SelectedImportProfile.CreditColumnName = value; }">
                                    @foreach (var column in _dataContext.IdentifiedColumns)
                                    {
                                        <option value="@column">@column</option>
                                    }
                                </select>
                            </div>
                            break;
                        case 2:
                            <div class="col-3">
                                <label class="form-label">Column to identify Credit records:</label>
                                <select class="form-select form-select-sm"
                                        @bind:get="_dataContext.SelectedImportProfile.CreditColumnIdentifierColumnName"
                                        @bind:set="(value) => { _dataContext.SelectedImportProfile.CreditColumnIdentifierColumnName = value; }">
                                    @foreach (var column in _dataContext.IdentifiedColumns)
                                    {
                                        <option value="@column">@column</option>
                                    }
                                </select>
                            </div>
                            <div class="col-3">
                                <label class="form-label">Column value to identify Credit records:</label>
                                <input class="form-control form-control-sm" type="text" @bind="_dataContext.SelectedImportProfile.CreditColumnIdentifierValue"/>
                            </div>
                            break;
                        case 0:
                        default:
                            break;
                    }
                </div>
                <div class="w-100">
                    <hr>
                </div>
                <div class="row">
                    <div class="col-6">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="@_dataContext.SelectedImportProfile.AdditionalSettingAmountCleanup">
                            <label class="form-check-label">Amount contains additional characters (e.g. currency symbols)</label>
                        </div>
                    </div>
                    @if (_dataContext.SelectedImportProfile.AdditionalSettingAmountCleanup)
                    {
                        <div class="col-3">
                            <label class="form-label">Characters / Substring to be removed:</label>
                            <input class="form-control form-control-sm" type="text" @bind="_dataContext.SelectedImportProfile.AdditionalSettingAmountCleanupValue"/>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingStepFour">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseStepFour" aria-expanded="false" aria-controls="collapseStepFour" disabled="@(!_step4Enabled)">
                @if (_step4Enabled)
                {
                    <div>Step 4: Validate and Import Data</div>
                }
                else
                {
                    <div>Step 4: Validate and Import Data (disabled)</div>
                }
            </button>
        </h2>
        <div id="collapseStepFour" class="accordion-collapse collapse" aria-labelledby="headingStepFour" data-bs-parent="#accordionSteps">
            <div class="accordion-body">
                @if (!_isValidationRunning)
                {
                    <button class="btn btn-sm btn-primary header-action-button" disabled="@_isImportRunning" @onclick=ValidateDataAsync>Validate Data</button>
                }
                else
                {
                     <button class="btn btn-sm btn-primary header-action-button" type="button" disabled>
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        Validating...
                    </button>     
                }

                @if (_dataContext.ValidRecords > 0 && !_isValidationRunning)
                {
                    @if (!_isImportRunning)
                    {
                        <button class="btn btn-sm btn-primary header-action-button" @onclick="() => ImportDataAsync(false)">Import Data</button>
                        <button class="btn btn-sm btn-primary header-action-button" @onclick="() => ImportDataAsync(true)">Import Data (without Duplicates)</button>
                    }
                    else
                    {
                         <button class="btn btn-sm btn-primary header-action-button" type="button" disabled>
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            Importing...
                        </button> 
                    }
                }
                <div mb-3>
                    <span>Total Records: @_dataContext.TotalRecords</span><br/>
                    <span>Valid Records: @_dataContext.ValidRecords</span><br/>
                    <span>Records with errors: @_dataContext.RecordsWithErrors</span><br/>
                    <span>Potential Duplicates: @_dataContext.PotentialDuplicates</span><br/>
                    @if (_validationErrorMessage != string.Empty)
                    {
                        <span style="color: red">Error message: @_validationErrorMessage</span>
                    }
                </div>

                @if (_dataContext.ParsedRecords.Any(i => i.IsValid))
                {
		            <div class="mb-3">
                        <h5>Preview (Valid Records)</h5>
                        <table class="table table-sm table-hover">
                            <thead>
                            <tr class="header-row">
                                <th style="text-align: right; width:100px">Date</th>
                                <th style="width:150px">Account</th>
                                <th style="width:250px">Payee</th>
                                <th>Memo</th>
                                <th style="text-align: right; width: 90px">Amount</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var transaction in _dataContext.ParsedRecords.Where(i => i.IsValid))
                            {
                                <tr>
                                    <td class="col-numbers">@transaction.Result.TransactionDate.ToShortDateString()</td>
                                    <td>@_dataContext.SelectedAccount.Name</td>
                                    <td>@transaction.Result.Payee</td>
                                    <td>@transaction.Result.Memo</td>
                                    <td class="col-numbers">@transaction.Result.Amount</td>
                                </tr>
                            }
                            </tbody>
                        </table>
		            </div>
                }
    
                @if (_dataContext.ParsedRecords.Any(i => !i.IsValid))
                {
		            <div class="mb-3">
                        <h5>Records with error:</h5>
                        <table class="table table-sm table-hover">
                            <thead>
                            <tr>
                                <th style="text-align: right; width:50px">Row</th>
                                <th>Details</th>
                            </tr>
                            </thead>
                            @foreach (var transaction in _dataContext.ParsedRecords.Where(i => !i.IsValid))
                            {
                                <tr>
                                    <td class="col-numbers">@transaction.RowIndex</td>
                                    <td>
                                        <div>@transaction.Error.Value</div>
                                        <div>@transaction.Error.UnmappedRow</div>
                                    </td>
                                </tr>
                            }
                        </table>
		            </div>
                }
    
                @if (_dataContext.Duplicates.Any())
                {
                    <div class="mb-3">
                        <h5>Potential Duplicates:</h5>
                        <table class="table table-sm table-hover">
                            <thead>
                                <tr class="header-row">
                                    <th style="text-align: right; width:100px">Date</th>
                                    <th style="width:150px">Account</th>
                                    <th style="width:250px">Payee</th>
                                    <th>Memo</th>
                                    <th style="text-align: right; width: 90px">Amount</th>
                                    <th style="width: 90px"></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var duplicate in _dataContext.Duplicates)
                                {
                                    <tr>
                                        <td class="col-numbers">@duplicate.Item1.Result.TransactionDate.ToShortDateString()</td>
                                        <td>@_dataContext.SelectedAccount.Name</td>
                                        <td>@duplicate.Item1.Result.Payee</td>
                                        <td>@duplicate.Item1.Result.Memo</td>
                                        <td class="col-numbers">@duplicate.Item1.Result.Amount</td>
                                        <td class="col-buttons"><button class="btn btn-sm btn-danger" @onclick="() => _dataContext.ExcludeDuplicateRecord(duplicate)">Exclude</button></td>
                                    </tr>
                                    foreach (var bankTransaction in duplicate.Item2)
                                    {
                                        <tr class="table-warning">
                                            <td class="col-numbers">@bankTransaction.TransactionDate.ToShortDateString()</td>
                                            <td>@_dataContext.SelectedAccount.Name</td>
                                            <td>@bankTransaction.Payee</td>
                                            <td>@bankTransaction.Memo</td>
                                            <td class="col-numbers">@bankTransaction.Amount</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="mb-3">
    <h5>File Content:</h5>
    <textarea class="form-control form-control-sm" readonly rows="30" @bind="_dataContext.FileText"></textarea>
</div>

@if (_isConfirmationModalDialogVisible)
 {
     <div class="modal fade show" style=" display: block;">
         <div class="modal-dialog modal-dialog-scrollable">
             <div class="modal-content">
                 <div class="modal-header">
                     <h4 class="modal-title">Import Transactions</h4>
                     <button type="button" class="btn-close" data-dismiss="modal" @onclick="@(() => _isConfirmationModalDialogVisible = false)"></button>
                 </div>
                 <div class="modal-body">
                     @_importConfirmationMessage
                 </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="@(() => _isConfirmationModalDialogVisible = false)">Keep Input</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="@(async () => await ClearFormAsync())">Clear Form</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
 }

<InfoDialog
    Title="Import"
    Message="@_infoDialogMessage"
    IsDialogVisible="@_isInfoDialogVisible"
    OnCloseClickCallback="@(() => _isInfoDialogVisible = false)"
    />

<DeleteConfirmationDialog
    Title="Delete Import Profile"
    Message="Do you really want to delete the selected Import Profile?"
    IsDialogVisible="@_isDeleteConfirmationDialogVisible"
    OnDeleteClickCallback="@DeleteProfile"
    OnCancelClickCallback="@(() => _isDeleteConfirmationDialogVisible = false)"
    />

<ErrorMessageDialog 
    Title="Import" 
    Message="@_errorModalDialogMessage" 
    IsDialogVisible="@_isErrorModalDialogVisible"
    OnClickCallback="@(() => _isErrorModalDialogVisible = false)"/>

@code {
    ImportDataViewModel _dataContext;

    ElementReference _inputElement;
    ElementReference _step1AccordionButtonElement;

    readonly Guid PlaceholderItemId = Guid.Parse("11111111-1111-1111-1111-111111111111");
    readonly string PlaceholderItemValue = "___PlaceholderItem___";
    readonly string DummyColumn = "---Select Column---";

    readonly ImportProfile _dummyImportProfile = new() 
    { 
        ImportProfileId = Guid.Parse("11111111-1111-1111-1111-111111111111"), 
        ProfileName = "---Select Import Profile---",
        AccountId = Guid.Parse("11111111-1111-1111-1111-111111111111")
    };

    readonly Contracts.Models.Account _dummyAccount = new() 
    { 
        AccountId = Guid.Parse("11111111-1111-1111-1111-111111111111"), 
        Name = "---Select Target Account---" 
    };

    bool _step2Enabled;
    bool _step3Enabled;
    bool _step4Enabled;
    bool _forceShowStep1;

    bool _isValidationRunning;
    bool _isImportRunning;

    string _validationErrorMessage = string.Empty;

    bool _isConfirmationModalDialogVisible;
    string _importConfirmationMessage;

    bool _isInfoDialogVisible;
    string _infoDialogMessage;

    bool _isDeleteConfirmationDialogVisible;

    bool _isErrorModalDialogVisible;
    string _errorModalDialogMessage;

    protected override void OnInitialized()
    {
        _dataContext = new ImportDataViewModel(DbContextOptions);
        LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (_forceShowStep1)
        {
            _forceShowStep1 = false;
            await JSRuntime.InvokeVoidAsync("ImportPage.triggerClick", _step1AccordionButtonElement);
        }
    }

    void LoadData()
    {
        HandleResult(_dataContext.LoadData());
        _dataContext.AvailableImportProfiles.Insert(0, _dummyImportProfile);
        _dataContext.AvailableAccounts.Insert(0, _dummyAccount);
        _dataContext.SelectedImportProfile = _dummyImportProfile;
        _dataContext.IdentifiedColumns.Insert(0, DummyColumn);
        _dataContext.SelectedAccount = _dummyAccount;
    }

    async Task ReadFileAsync()
    {
        _step2Enabled = false;
        _step3Enabled = false;
        _step4Enabled = false;
        _dataContext.SelectedImportProfile = _dummyImportProfile;
        _dataContext.IdentifiedColumns.Insert(0, DummyColumn);
        _dataContext.SelectedAccount = _dummyAccount;

        var file = (await FileReaderService.CreateReference(_inputElement).EnumerateFilesAsync()).FirstOrDefault();
        if (file == null) return;
        HandleResult(await _dataContext.HandleOpenFileAsync(await file.OpenReadAsync()));
        _step2Enabled = true;
    }

    void LoadProfile()
    {
        _dataContext.InitializeDataFromImportProfile();
        _step3Enabled = 
            _dataContext.SelectedImportProfile.ImportProfileId != Guid.Empty && 
            _dataContext.SelectedImportProfile.ImportProfileId != PlaceholderItemId;
        CheckColumnMapping();
        StateHasChanged();
    }

    void DeleteProfile()
    {
        _isDeleteConfirmationDialogVisible = false;
        HandleResult(_dataContext.DeleteProfile());
        if (_dataContext.SelectedImportProfile.ImportProfileId == Guid.Empty ||
            _dataContext.SelectedImportProfile.ImportProfileId == PlaceholderItemId)
        {
            _dataContext.SelectedImportProfile = _dummyImportProfile;
            _dataContext.AvailableImportProfiles.Insert(0, _dummyImportProfile);
            _dataContext.SelectedAccount = _dummyAccount;
        }
    }

    void LoadHeaders()
    {
        var result = _dataContext.LoadHeaders();
        if (result.IsSuccessful)
        {
            _step3Enabled = true;
        }
        else
        {
            HandleResult(result);
        }
    }

    void CheckColumnMapping()
    {
        _step4Enabled = false;
        if (string.IsNullOrEmpty(_dataContext.SelectedImportProfile.TransactionDateColumnName) || 
            _dataContext.SelectedImportProfile.TransactionDateColumnName == PlaceholderItemValue) return;
        // Make Payee optional
        //if (string.IsNullOrEmpty(_dataContext.PayeeColumn) || _dataContext.PayeeColumn == _placeholderItemValue) return;
        if (string.IsNullOrEmpty(_dataContext.SelectedImportProfile.MemoColumnName) || 
            _dataContext.SelectedImportProfile.MemoColumnName == PlaceholderItemValue) return;
        if (string.IsNullOrEmpty(_dataContext.SelectedImportProfile.AmountColumnName) || 
            _dataContext.SelectedImportProfile.AmountColumnName == PlaceholderItemValue) return;
        _step4Enabled = true;
    }

    async Task ValidateDataAsync()
    {
        _isValidationRunning = true;
        _validationErrorMessage = (await _dataContext.ValidateDataAsync()).Message;
        _isValidationRunning = false;
    }

    async Task ImportDataAsync(bool withoutDuplicates)
    {
        _isImportRunning = true;
        var result = await _dataContext.ImportDataAsync(withoutDuplicates);
        _importConfirmationMessage = result.Message;
        _isImportRunning = false;
        _isConfirmationModalDialogVisible = true;
    }

    async Task ClearFormAsync()
    {
        _isConfirmationModalDialogVisible = false;
        _step2Enabled = false;
        _step3Enabled = false;
        _step4Enabled = false;
        await FileReaderService.CreateReference(_inputElement).ClearValue();
        _dataContext = new ImportDataViewModel(DbContextOptions);
        LoadData();
        _forceShowStep1 = true;
        StateHasChanged();
    }

    void ImportProfile_SelectionChanged()
    {
        _step3Enabled = false;
        _step4Enabled = false;
        if (_dataContext.SelectedImportProfile != null &&
            _dataContext.SelectedImportProfile.ImportProfileId != PlaceholderItemId) LoadProfile();
    }

    void TargetAccount_SelectionChanged()
    {
        _dataContext.SelectedImportProfile.AccountId = _dataContext.SelectedAccount?.AccountId ?? Guid.Empty;
    }

    void AdditionalSettingCreditValue_SelectionChanged(ChangeEventArgs e)
    {
        var value = Convert.ToInt32(e.Value);
        _dataContext.SelectedImportProfile.AdditionalSettingCreditValue = value;
    }

    void HandleResult(ViewModelOperationResult result, string successMessage = "")
    {
        if (!result.IsSuccessful)
        {
            _errorModalDialogMessage = result.Message;
            _isErrorModalDialogVisible = true;
            return;
        }
        if (string.IsNullOrEmpty(successMessage)) return;

        _infoDialogMessage = successMessage;
        _isInfoDialogVisible = true;
    }
}
