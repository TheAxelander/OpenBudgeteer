@page "/rules"

@using Microsoft.EntityFrameworkCore
@using OpenBudgeteer.Core.ViewModels
@using OpenBudgeteer.Core.ViewModels.ItemViewModels
@using System.Drawing
@using OpenBudgeteer.Contracts.Models
@using OpenBudgeteer.Core.Common
@using OpenBudgeteer.Data
@inject DbContextOptions<DatabaseContext> DbContextOptions

<div class="row">
    <div class="col">
        @if (_massEditEnabled)
        {
            <button class="btn btn-sm btn-primary header-action-button" @onclick="@SaveAllRules">Save all</button>
            <button class="btn btn-sm btn-danger header-action-button" @onclick="@CancelAllRules">Cancel all</button>
        }
        else
        {
            <button class="btn btn-sm btn-primary header-action-button" @onclick="@(() => _newMappingRuleSetIsEnabled = true)">Create Rule</button>
            <button class="btn btn-sm btn-primary header-action-button" @onclick="@EditAllRules">Edit all</button>
        }
    </div>
</div>

@if (_newMappingRuleSetIsEnabled)
{
	<table class="table table-sm table-hover">
        <thead>
        <tr>
            <th style="text-align: right; width:110px">Priority</th>
            <th style="width:250px">Rule Name</th>
            <th style="width:300px">Target Bucket</th>
            <th>Mapping Rules</th>
        </tr>
        </thead>
        <tbody>
            <tr>
                <td><input class="form-control form-control-sm number-input" type="number" @bind="_dataContext.NewRuleSet.RuleSet.Priority" /></td>
                <td><input class="form-control form-control-sm" type="text" @bind="_dataContext.NewRuleSet.RuleSet.Name" /></td>
                <td>
                    <button class="btn btn-sm btn-bucket" style="background-color: @ColorTranslator.ToHtml(_dataContext.NewRuleSet.TargetBucket.Color)" @onclick="() => HandleUpdateSelectedBucketRequest(_dataContext.NewRuleSet)">
                        @_dataContext.NewRuleSet.TargetBucket.Name
                    </button>
                </td>
                <td>
                    <table class="table table-borderless" style="margin-bottom: auto;">
                        <tbody>
                            @foreach (var mappingRule in _dataContext.NewRuleSet.MappingRules)
                            {
                                <tr>
                                    <td style="width: 120px">
                                        <select class="form-select form-select-sm"
                                                @bind:get="mappingRule.MappingRule.ComparisionField"
                                                @bind:set="(value) => { mappingRule.MappingRule.ComparisionField = Convert.ToInt32(value); }">
                                            @for (int i = 1; i <= 4; i++)
                                            {
                                                <option value="@i">@(new MappingRule(){ ComparisionField = i}.ComparisonFieldOutput)</option>
                                            }
                                        </select>
                                    </td>
                                    <td style="width: 160px">
                                        <select class="form-select form-select-sm"
                                                @bind:get="mappingRule.MappingRule.ComparisionType"
                                                @bind:set="(value) => { mappingRule.MappingRule.ComparisionType = Convert.ToInt32(value); }">
                                            @for (int i = 1; i <= 4; i++)
                                            {
                                                <option value="@i">@(new MappingRule(){ ComparisionType = i}.ComparisionTypeOutput)</option>
                                            }
                                        </select>
                                    </td>
                                    <td>
                                        <input class="form-control form-control-sm" type="text" @bind="mappingRule.MappingRule.ComparisionValue" />
                                    </td>
                                    <td class="col-buttons" style="width: 1px">
                                        <button class="btn btn-sm btn-primary bi bi-plus-lg" @onclick="@(() => _dataContext.NewRuleSet.AddEmptyMappingRule())"></button>
                                        <button class="btn btn-sm btn-danger bi bi-x-lg" @onclick="@(() => _dataContext.NewRuleSet.DeleteMappingRule(mappingRule))"></button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </td>
                <td class="col-buttons">
                    <button class="btn btn-sm btn-primary bi bi-check-lg" @onclick="@(() => HandleResult(_dataContext.CreateNewRuleSet()))"></button>
                    <button class="btn btn-sm btn-danger bi bi-x-lg" @onclick="@CancelNewBucketRule"></button>
                </td>
            </tr>
        </tbody>
    </table>
}

<table class="table table-sm table-hover">
    <thead>
    <tr>
        <th style="text-align: right; width:110px">Priority</th>
        <th style="width:250px">Rule Name</th>
        <th style="width:300px">Target Bucket</th>
        <th>Mapping Rules</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var ruleSet in _dataContext.RuleSets)
    {
        @if (ruleSet.InModification)
        {
            <tr>
                <td><input class="form-control form-control-sm number-input" type="number" @bind="ruleSet.RuleSet.Priority" /></td>
                <td><input class="form-control form-control-sm" type="text" @bind="ruleSet.RuleSet.Name" /></td>
                <td>
                    <button class="btn btn-sm btn-bucket" style="background-color: @ColorTranslator.ToHtml(ruleSet.TargetBucket.Color)" @onclick="() => HandleUpdateSelectedBucketRequest(ruleSet)">
                        @ruleSet.TargetBucket.Name
                    </button>
                </td>
                <td>
                    <table class="table table-borderless" style="margin-bottom: auto;">
                        <tbody>
                        @foreach (var mappingRule in ruleSet.MappingRules)
                        {
                            <tr>
                                <td style="width: 120px">
                                    <select class="form-select form-select-sm"
                                            @bind:get="mappingRule.MappingRule.ComparisionField"
                                            @bind:set="(value) => { mappingRule.MappingRule.ComparisionField = Convert.ToInt32(value); }">
                                        @for (int i = 1; i <= 4; i++)
                                        {
                                            <option value="@i">@(new MappingRule(){ ComparisionField = i}.ComparisonFieldOutput)</option>
                                        }
                                    </select>
                                </td>
                                <td style="width: 160px">
                                    <select class="form-select form-select-sm"
                                            @bind:get="mappingRule.MappingRule.ComparisionType.ToString()"
                                            @bind:set="(value) => { mappingRule.MappingRule.ComparisionType = Convert.ToInt32(value); }">
                                        @for (int i = 1; i <= 4; i++)
                                        {
                                            <option value="@i">@(new MappingRule(){ ComparisionType = i}.ComparisionTypeOutput)</option>
                                        }
                                    </select>
                                </td>
                                <td>
                                    <input class="form-control form-control-sm" type="text" @bind="mappingRule.MappingRule.ComparisionValue" />
                                </td>
                                <td class="col-buttons" style="width: 1px">
                                    <button class="btn btn-sm btn-primary bi bi-plus-lg" @onclick="@(() => ruleSet.AddEmptyMappingRule())"></button>
                                    <button class="btn btn-sm btn-danger bi bi-x-lg" @onclick="@(() => ruleSet.DeleteMappingRule(mappingRule))"></button>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </td>
                <td class="col-buttons">
                    <button class="btn btn-sm btn-primary bi bi-check-lg" @onclick="@(async () => await HandleResult(_dataContext.SaveRuleSetItem(ruleSet)))"></button>
                    <button class="btn btn-sm btn-danger bi bi-x-lg" @onclick="@(() => ruleSet.CancelModification())"></button>
                </td>
            </tr>
        }
        else
        {
            <tr @onmouseover="() => ruleSet.IsHovered = true" @onmouseout="() => ruleSet.IsHovered = false">
                <td class="col-numbers">@ruleSet.RuleSet.Priority</td>
                <td>@ruleSet.RuleSet.Name</td>
                <td><div style="background-color: @ColorTranslator.ToHtml(ruleSet.TargetBucket.Color); border-radius: 25px; padding: 5px 10px">@ruleSet.TargetBucket.Name</div></td>
                <td>
                    <ul>
                        @foreach (var mappingRule in ruleSet.MappingRules)
                        {
                            <li>@mappingRule.RuleOutput</li>
                        }
                    </ul>
                </td>
                <td class="col-buttons">
                    @if (ruleSet.IsHovered)
                    {
                        <button class="btn btn-sm btn-primary bi bi-pencil" @onclick="@(() => ruleSet.StartModification())"></button>
                        <button class="btn btn-sm btn-danger bi bi-trash3" @onclick="@(() => HandleRuleSetDeletionRequest(ruleSet))"></button>
                    }
                </td>
            </tr>
        }
    }
    </tbody>
</table>

<BucketSelectDialog
    DataContext="@_bucketSelectDialogDataContext"
    IsDialogVisible="@_isBucketSelectDialogVisible"
    IsDialogLoading="@_isBucketSelectDialogLoading"
    OnBucketSelectedCallback="UpdateSelectedBucket"
    OnCancelCallback="@(() => _isBucketSelectDialogVisible = false)"/>

<DeleteConfirmationDialog 
    Title="Delete Rule" 
    Message="Do you really want to delete this Rule?" 
    IsDialogVisible="@_isDeleteRuleSetModalDialogVisible"
    OnDeleteClickCallback="DeleteRule"
    OnCancelClickCallback="CancelDeleteRule"/>

<ErrorMessageDialog 
    Title="Rules" 
    Message="@_errorModalDialogMessage" 
    IsDialogVisible="@_isErrorModalDialogVisible"
    OnClickCallback="@(() => _isErrorModalDialogVisible = false)"/>

@code {
    RulesViewModel _dataContext;
    bool _massEditEnabled;
    bool _newMappingRuleSetIsEnabled;
    
    BucketViewModel _bucketSelectDialogDataContext;
    bool _isBucketSelectDialogVisible;
    bool _isBucketSelectDialogLoading;
    RuleSetViewModelItem _ruleSetViewModelItemToBeUpdated;

    bool _isDeleteRuleSetModalDialogVisible;
    RuleSetViewModelItem _ruleSetToBeDeleted;

    bool _isErrorModalDialogVisible;
    string _errorModalDialogMessage;

    protected override async Task OnInitializedAsync()
    {
        _dataContext = new RulesViewModel(DbContextOptions);

        await HandleResult(await _dataContext.LoadDataAsync());
    }

	void CancelNewBucketRule()
    {
        _newMappingRuleSetIsEnabled = false;
        _dataContext.ResetNewRuleSet();
    }

    void EditAllRules()
    {
        _massEditEnabled = true;
        _dataContext.EditAllRules();
    }

    async void SaveAllRules()
    {
        _massEditEnabled = false;
        await HandleResult(_dataContext.SaveAllRules());
    }

    async void CancelAllRules()
    {
        _massEditEnabled = false;
        await HandleResult(await _dataContext.LoadDataAsync());
        StateHasChanged();
    }
    
    async void HandleUpdateSelectedBucketRequest(RuleSetViewModelItem ruleSetViewModelItem)
    {
        _isBucketSelectDialogVisible = true;
        _isBucketSelectDialogLoading = true;
        
        _ruleSetViewModelItemToBeUpdated = ruleSetViewModelItem;
        _bucketSelectDialogDataContext = new BucketViewModel(DbContextOptions, new YearMonthSelectorViewModel());
        await _bucketSelectDialogDataContext.LoadDataAsync();
        
        _isBucketSelectDialogLoading = false;
        StateHasChanged();
    }
    
    void UpdateSelectedBucket(Contracts.Models.Bucket selectedBucket)
    {
        _ruleSetViewModelItemToBeUpdated.TargetBucket = selectedBucket;
        _ruleSetViewModelItemToBeUpdated.RuleSet.TargetBucketId = selectedBucket.BucketId;
        _isBucketSelectDialogVisible = false;
    }

	void HandleRuleSetDeletionRequest(RuleSetViewModelItem ruleSet)
    {
        _ruleSetToBeDeleted = ruleSet;
        _isDeleteRuleSetModalDialogVisible = true;
    }

	void CancelDeleteRule()
    {
        _isDeleteRuleSetModalDialogVisible = false;
        _ruleSetToBeDeleted = null;
    }

    async void DeleteRule()
    {
        _isDeleteRuleSetModalDialogVisible = false;
        await HandleResult(_dataContext.DeleteRuleSetItem(_ruleSetToBeDeleted));
    }

    async Task HandleResult(ViewModelOperationResult result)
    {
        if (!result.IsSuccessful)
        {
            _errorModalDialogMessage = result.Message;
            _isErrorModalDialogVisible = true;
        }
		if (result.ViewModelReloadRequired)
        {
            await _dataContext.LoadDataAsync();
            StateHasChanged();
        }
    }
}
