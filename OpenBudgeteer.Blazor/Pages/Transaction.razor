@page "/transaction"

@using OpenBudgeteer.Core.ViewModels
@using OpenBudgeteer.Core.Common.Database
@using Microsoft.EntityFrameworkCore
@using System.Drawing
@using OpenBudgeteer.Core.Common
@using OpenBudgeteer.Core.Common.EventClasses
@using OpenBudgeteer.Core.Common.Extensions
@using OpenBudgeteer.Core.ViewModels.ItemViewModels
@inject DbContextOptions<DatabaseContext> DbContextOptions
@inject YearMonthSelectorViewModel YearMonthDataContext

<div class="row align-items-center">
    <div class="col">
        @if (_massEditEnabled)
        {
            <button class="btn btn-sm btn-primary header-action-button" @onclick="@SaveAllTransaction">Save all</button>
            <button class="btn btn-sm btn-danger header-action-button" @onclick="@CancelAllTransaction">Cancel all</button>
        }
        else
        {
            <button class="btn btn-sm btn-primary header-action-button" @onclick="@(() => _newTransactionEnabled = true)">Create Transaction</button>
            <button class="btn btn-sm btn-primary header-action-button" @onclick="@EditAllTransaction">Edit all</button>
            <button class="btn btn-sm btn-primary header-action-button" @onclick="@(async () => await ProposeBucketsAsync())">Propose Buckets</button>
        }
    </div>
    <div class="col-md-auto">
        <select class="form-select form-select-sm" style="width: auto" @onchange="@Filter_SelectionChanged">
            @foreach (var filter in Enum.GetValues<TransactionViewModelFilter>())
            {
                if (filter == _dataContext.CurrentFilter)
                {
                    <option selected value="@filter">@filter.GetStringValue()</option>    
                }
                else
                {
                    <option value="@filter">@filter.GetStringValue()</option>
                }
                
            }
        </select>
    </div>
    <YearMonthSelector DataContext="YearMonthDataContext" />
</div>

@if (_newTransactionEnabled)
{
    <table class="table table-sm">
        <thead>
            <tr>
                <th style="text-align: right; width:100px">Date</th>
                <th style="width:150px">Account</th>
                <th style="width:250px">Payee</th>
                <th>Memo</th>
                <th style="text-align: right; width: 90px">Amount</th>
                <th style="width:300px">Buckets</th>
                <th style="width:120px" />
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <input class="form-control form-control-sm number-input" type="date" @bind="_dataContext.NewTransaction.Transaction.TransactionDate" />
                </td>
                <td>

                    <select class="form-select form-select-sm" @onchange=@(e => _dataContext.NewTransaction.SelectedAccount = _dataContext.NewTransaction.AvailableAccounts.First(i => i.AccountId == Convert.ToInt32(e.Value)))>
                        @foreach (var account in _dataContext.NewTransaction.AvailableAccounts)
                        {
                            if (account.AccountId == _dataContext.NewTransaction.SelectedAccount.AccountId)
                            {
                                <option selected value="@account.AccountId">@account.Name</option>
                            }
                            else
                            {
                                <option value="@account.AccountId">@account.Name</option>
                            }
                        }
                    </select>
                </td>
                <td><input class="form-control form-control-sm" type="text" @bind="_dataContext.NewTransaction.Transaction.Payee" /></td>
                <td><textarea class="form-control form-control-sm" rows="1" @bind="_dataContext.NewTransaction.Transaction.Memo"></textarea></td>
                <td><input class="form-control form-control-sm number-input" type="number" @bind="_dataContext.NewTransaction.Transaction.Amount" /></td>
                <td>
                    <table class="table" style="margin-bottom: auto">
                        <tbody>
                            @foreach (var bucket in _dataContext.NewTransaction.Buckets)
                            {
                                <tr>
                                    <td>
                                        <select class="form-select form-select-sm" style="background-color: @ColorTranslator.ToHtml(bucket.SelectedBucket.Color)"
                                                @onchange=@((e) => bucket.SelectedBucket = bucket.AvailableBuckets.First(i => i.BucketId == Convert.ToInt32(e.Value)))>
                                            @foreach (var availableBucket in bucket.AvailableBuckets)
                                            {
                                                if (bucket.SelectedBucket.BucketId == availableBucket.BucketId)
                                                {
                                                    <option selected style="background-color: @ColorTranslator.ToHtml(availableBucket.Color)" value="@availableBucket.BucketId">@availableBucket.Name</option>
                                                }
                                                else
                                                {
                                                    <option style="background-color: @ColorTranslator.ToHtml(availableBucket.Color)" value="@availableBucket.BucketId">@availableBucket.Name</option>
                                                }
                                            }
                                        </select>
                                    </td>
                                    <td style="width: 90px"><input class="form-control form-control-sm number-input" type="number" @bind="bucket.Amount" /></td>
                                    <td><button class="btn btn-sm btn-danger oi oi-x" @onclick="@(() => bucket.DeleteBucket())"></button></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                                    
                    @if (_dataContext.NewTransaction.Difference != 0)
                    {
                        <div class="row bucket-indicator" style="background-color: deepskyblue">
                            <div class="col">Remaining</div>
                            <div class="col-md-auto col-numbers">@(_dataContext.NewTransaction.Difference)</div>
                        </div>
                    }
                </td>
                <td class="col-buttons">
                    <button class="btn btn-sm btn-primary oi oi-fork" @onclick="@(() => SplitTransaction(_dataContext.NewTransaction))"></button>
                    <button class="btn btn-sm btn-primary oi oi-check" @onclick="@(() => HandleResult(_dataContext.CreateItem()))"></button>
                    <button class="btn btn-sm btn-danger oi oi-x" @onclick="@CancelNewTransaction"></button>
                </td>
            </tr>
        </tbody>
    </table>
}

<table class="table table-sm table-hover">
    <thead>
    <tr class="header-row">
        <th style="text-align: right; width:100px">Date</th>
        <th style="width:150px">Account</th>
        <th style="width:250px">Payee</th>
        <th>Memo</th>
        <th style="text-align: right; width: 90px">Amount</th>
        <th style="width:300px">Buckets</th>
        <th style="width:120px" />
    </tr>
    </thead>
    <tbody>
    @foreach (var transaction in _dataContext.Transactions)
    {
        @if (transaction.InModification)
        {
            <tr>
                <td>
                    <input class="form-control form-control-sm number-input" type="date" @bind="transaction.Transaction.TransactionDate" />
                </td>
                <td>
                    <select class="form-select form-select-sm" @onchange=@(e => transaction.SelectedAccount = transaction.AvailableAccounts.First(i => i.AccountId == Convert.ToInt32(e.Value)))>
                        @foreach (var account in transaction.AvailableAccounts)
                        {
                            if (account.AccountId == transaction.SelectedAccount.AccountId)
                            {
                                <option selected value="@account.AccountId">@account.Name</option>
                            }
                            else
                            {
                                <option value="@account.AccountId">@account.Name</option>
                            }
                        }
                    </select>
                </td>
                <td><input class="form-control form-control-sm" type="text" @bind="transaction.Transaction.Payee" /></td>
                <td><textarea class="form-control form-control-sm" rows="1" @bind="transaction.Transaction.Memo"></textarea></td>
                <td><input class="form-control form-control-sm number-input" type="number" @bind="transaction.Transaction.Amount" /></td>
                <td>
                    <table class="table table-borderless" style="margin-bottom: auto;">
                        <tbody>
                            @foreach (var bucket in transaction.Buckets)
                            {
                                <tr>
                                    <td>
                                        <select class="form-select form-select-sm" style="background-color: @ColorTranslator.ToHtml(bucket.SelectedBucket.Color)"
                                                @onchange=@((e) => bucket.SelectedBucket = bucket.AvailableBuckets.First(i => i.BucketId == Convert.ToInt32(e.Value)))>
                                            @foreach (var availableBucket in bucket.AvailableBuckets)
                                            {
                                                if (bucket.SelectedBucket.BucketId == availableBucket.BucketId)
                                                {
                                                    <option selected style="background-color: @ColorTranslator.ToHtml(availableBucket.Color)" value="@availableBucket.BucketId">@availableBucket.Name</option>
                                                }
                                                else
                                                {
                                                    <option style="background-color: @ColorTranslator.ToHtml(availableBucket.Color)" value="@availableBucket.BucketId">@availableBucket.Name</option>
                                                }
                                            }
                                        </select>
                                    </td>
                                    <td style="width: 90px"><input class="form-control form-control-sm number-input" type="number" @bind="bucket.Amount" /></td>
                                    <td><button class="btn btn-sm btn-danger oi oi-x" @onclick="@(() => bucket.DeleteBucket())"></button></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                                    
                    @if (transaction.Difference != 0)
                    {
                        <div class="row bucket-indicator" style="background-color: deepskyblue">
                            <div class="col">Remaining</div>
                            <div class="col-md-auto col-numbers">@(transaction.Difference)</div>
                        </div>
                    }
                </td>
                <td class="col-buttons">
                    <button class="btn btn-sm btn-primary oi oi-fork" @onclick="@(() => SplitTransaction(transaction))"></button>
                    <button class="btn btn-sm btn-primary oi oi-check" @onclick="@(() => SaveTransaction(transaction))"></button>
                    <button class="btn btn-sm btn-danger oi oi-x" @onclick="@(() => transaction.CancelModification())"></button>
                </td>
            </tr>
        }
        else
        {
            <tr @onmouseover="() => transaction.IsHovered = true" @onmouseout="() => transaction.IsHovered = false">
                <td class="col-numbers">@transaction.Transaction.TransactionDate.ToShortDateString()</td>
                <td>@transaction.SelectedAccount.Name</td>
                <td>@transaction.Transaction.Payee</td>
                <td>@transaction.Transaction.Memo</td>
                <td class="col-numbers">@transaction.Transaction.Amount</td>
                <td style="vertical-align: middle">
                    @foreach (var bucket in transaction.Buckets)
                    {
                        <div class="row bucket-indicator" style="background-color: @ColorTranslator.ToHtml(bucket.SelectedBucket.Color)">
                            <div class="col">@bucket.SelectedBucket.Name</div>
                            <div class="col-md-auto col-numbers">@bucket.Amount</div>
                        </div>
                    }
                </td>
                <td class="col-buttons">
                    @if (transaction.IsHovered)
                    {
                        <button class="btn btn-sm btn-primary oi oi-pencil" @onclick="@(() => transaction.StartModification())"></button>
                        <button class="btn btn-sm btn-danger oi oi-trash" @onclick="@(() => HandleTransactionDeletionRequest(transaction))"></button>
                    }
                </td>
            </tr>
        }
    }
    </tbody>
</table>

@if (_isProposeBucketsInfoDialogVisible)
{
    <div class="modal fade show" style=" display: block;">
        <div class="modal-dialog modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Propose Buckets</h4>
                </div>
                <div class="modal-body">Searching Buckets based on defined rules...</div>
                <div class="modal-footer"></div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<DeleteConfirmationDialog 
    Title="Delete Transaction" 
    Message="Do you really want to delete this Transaction?" 
    IsDialogVisible="@_isDeleteTransactionModalDialogVisible"
    OnDeleteClickCallback="DeleteTransaction"
    OnCancelClickCallback="CancelDeleteTransaction"/>

<ErrorMessageDialog 
    Title="Transaction" 
    Message="@_errorModalDialogMessage" 
    IsDialogVisible="@_isErrorModalDialogVisible"
    OnClickCallback="@(() => _isErrorModalDialogVisible = false)"/>

@code {
    TransactionViewModel _dataContext;
    bool _newTransactionEnabled;
    bool _massEditEnabled;

    bool _isDeleteTransactionModalDialogVisible;
    TransactionViewModelItem _transactionToBeDeleted;

    bool _isErrorModalDialogVisible;
    string _errorModalDialogMessage;

    bool _isProposeBucketsInfoDialogVisible;

    protected override async Task OnInitializedAsync()
    {
        _dataContext = new TransactionViewModel(DbContextOptions, YearMonthDataContext);

        await HandleResult(await _dataContext.LoadDataAsync());

        YearMonthDataContext.SelectedYearMonthChanged += async (sender, args) =>
        {
            await HandleResult(await _dataContext.LoadDataAsync());
            base.StateHasChanged();
        };
    }

    void CancelNewTransaction()
    {
        _newTransactionEnabled = false;
        _dataContext.ResetNewTransaction();
    }

    void EditAllTransaction()
    {
        _massEditEnabled = true;
        _dataContext.EditAllTransaction();
    }

    async Task ProposeBucketsAsync()
    {
        _isProposeBucketsInfoDialogVisible = true;
        StateHasChanged();
        await _dataContext.ProposeBuckets();
        if (_dataContext.Transactions.Any(i => i.InModification)) _massEditEnabled = true;
        _isProposeBucketsInfoDialogVisible = false;
    }

    void SplitTransaction(TransactionViewModelItem transaction) =>
        transaction.AddBucketItem(transaction.Transaction.Amount - transaction.Buckets.Sum(b => b.Amount));
    
    async void SaveAllTransaction()
    {
        _massEditEnabled = false;
        await HandleResult(_dataContext.SaveAllTransaction());
    }

    async void CancelAllTransaction()
    {
        _massEditEnabled = false;
        await HandleResult(await _dataContext.CancelAllTransactionAsync());
        base.StateHasChanged();
    }

    async void SaveTransaction(TransactionViewModelItem transaction)
    {
        await HandleResult(transaction.UpdateItem());
    }
    
    void Filter_SelectionChanged(ChangeEventArgs e)
    {
        _dataContext.CurrentFilter = Enum.Parse<TransactionViewModelFilter>(
            e.Value as string ?? TransactionViewModelFilter.NoFilter.ToString());
    }

    void HandleTransactionDeletionRequest(TransactionViewModelItem transaction)
    {
        _transactionToBeDeleted = transaction;
        _isDeleteTransactionModalDialogVisible = true;
    }

    void CancelDeleteTransaction()
    {
        _isDeleteTransactionModalDialogVisible = false;
        _transactionToBeDeleted = null;
    }

    async void DeleteTransaction()
    {
        _isDeleteTransactionModalDialogVisible = false;
        await HandleResult(_transactionToBeDeleted.DeleteItem());
    }

    async Task HandleResult(ViewModelOperationResult result)
    {
        if (!result.IsSuccessful)
        {
            _errorModalDialogMessage = result.Message;
            _isErrorModalDialogVisible = true;
        }
		if (result.ViewModelReloadRequired)
        {
            await _dataContext.LoadDataAsync();
            StateHasChanged();
        }
    }
}