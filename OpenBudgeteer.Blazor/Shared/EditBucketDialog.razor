@using System.Drawing
@using OpenBudgeteer.Core.Common.Extensions
@using OpenBudgeteer.Core.ViewModels.EntityViewModels
@if (IsDialogVisible)
{
    <div class="modal fade show" style=" display: block;">
        <div class="modal-dialog modal-dialog-scrollable" style="max-width: 600px">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">@Title</h4>
                    <button type="button" class="btn-close" data-dismiss="modal" @onclick="OnCancelClickCallback"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-12 col-sm-6 mb-2">
                            <label class="form-label">Name:</label>
                            <input class="form-control form-control-sm" type="text" @bind="DataContext.Name"/>
                        </div>
						<div class="col-12 col-sm-6 mb-2">
                            <label class="form-label">Bucket Group:</label>
                            <select class="form-select form-select-sm" 
                                    @bind:get="DataContext.SelectedBucketGroup!.Id.ToString()"
                                    @bind:set="BucketGroup_SelectionChanged">
                                @foreach (var bucketGroup in DataContext.AvailableBucketGroups!)
                                {
                                    <option value="@bucketGroup.Id">@bucketGroup.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-12 col-sm-6 mb-2">
                            <label class="form-label">Bucket Type:</label>
                            <select class="form-select form-select-sm"
                                    @bind:get="((int)DataContext.BucketVersion.BucketTypeParameter).ToString()"
                                    @bind:set="BucketType_SelectionChanged">
                                @for (int i = 1; i <= 4; i++)
                                {
                                    <option value="@i">@(((BucketVersionViewModel.BucketType)i).GetStringValue())</option>
                                }
                            </select>
                        </div>
                        <div class="col-12 col-sm-6 mb-2">
                            <label class="form-label">Number of months:</label>
                            @if (_isNumberOfMonthsEnabled)
                            {
                                <input class="form-control form-control-sm" style="text-align: right;" type="number" @bind="DataContext.BucketVersion.BucketTypeIntParameter"/>    
                            }
                            else
                            {
                                <input class="form-control form-control-sm" disabled style="text-align: right;" type="number"/>
                            }
                        </div>
                        <div class="col-12 col-sm-6 mb-2">
                            <label class="form-label">Amount:</label>
                            @if (_isAmountEnabled)
                            {
                                <input class="form-control form-control-sm" style="text-align: right;" type="number" @bind="DataContext.BucketVersion.BucketTypeDecimalParameter"/>    
                            }
                            else
                            {
                                <input class="form-control form-control-sm" disabled style="text-align: right;" type="number"/>
                            }
                        </div>
                        <div class="col-12 col-sm-6 mb-2">
                            <label class="form-label">(First) Target Date:</label>
                            @if (_isTargetDataEnabled)
                            {
                                <input class="form-control form-control-sm" style="text-align: right;" type="date" @bind="DataContext.BucketVersion.BucketTypeDateParameter" @bind:format="yyyy-MM-dd"/>
                                <span class="text-muted">Next applying date: @DataContext.BucketVersion.BucketTypeNextDateParameter.ToShortDateString()</span>
                            }
                            else
                            {
                                <input class="form-control form-control-sm" disabled style="text-align: right;" type="date"/>
                            }
                        </div>
                        <div class="col-12 col-sm-6 mb-2">
                            <label class="form-label">Background Color:</label>
                            <select class="form-select form-select-sm" style="background-color: @ColorTranslator.ToHtml(DataContext.Color); color: @ColorTranslator.ToHtml(DataContext.TextColor)"
                                    @bind:get="DataContext.ColorCode"
                                    @bind:set="(value) => { DataContext.ColorCode = value!; }">
                                @foreach (var color in DataContext.AvailableColors!)
                                {
                                    <option style="background-color: @ColorTranslator.ToHtml(color); color: @ColorTranslator.ToHtml(DataContext.TextColor)" value="@color.Name">@color.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-12 col-sm-6 mb-2">
                            <label class="form-label">Text Color:</label>
                            <select class="form-select form-select-sm" style="background-color: @ColorTranslator.ToHtml(DataContext.Color); color: @ColorTranslator.ToHtml(DataContext.TextColor)"
                                    @bind:get="DataContext.TextColorCode"
                                    @bind:set="(value) => { DataContext.TextColorCode = value!; }">
                                @foreach (var color in DataContext.AvailableColors!)
                                {
                                    <option style="background-color: @ColorTranslator.ToHtml(DataContext.Color); color: @ColorTranslator.ToHtml(color)" value="@color.Name">@color.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div>
                        <label class="form-label">Notes:</label>
                        <textarea rows="5" style="width: 100%" @bind="DataContext.BucketVersion.Notes"></textarea>
                    </div>
                </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="OnSaveClickCallback">Save</button>
                <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="OnCancelClickCallback">Cancel</button>
            </div>
        </div>
    </div>
</div>
<div class="modal-backdrop fade show"></div>
}

@code {
    bool _isNumberOfMonthsEnabled = true;
    bool _isAmountEnabled = true;
    bool _isTargetDataEnabled = true;
    
    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public BucketViewModel DataContext { get; set; } = null!;

    [Parameter]
    public bool IsDialogVisible { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnCancelClickCallback { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnSaveClickCallback { get; set; }

    protected override Task OnParametersSetAsync()
    {
        if (IsDialogVisible) UpdateInputFieldsState();
        return base.OnParametersSetAsync();
    }

    void BucketType_SelectionChanged(string? value)
    {
        if (string.IsNullOrEmpty(value)) return;
        DataContext.BucketVersion.BucketTypeParameter = (BucketVersionViewModel.BucketType)Convert.ToInt32(value);
        UpdateInputFieldsState();
    }

    void UpdateInputFieldsState()
    {
        switch (DataContext.BucketVersion!.BucketTypeParameter)
        {
            case BucketVersionViewModel.BucketType.StandardBucket:
                _isNumberOfMonthsEnabled = false;
                _isAmountEnabled = false;
                _isTargetDataEnabled = false;
                break;
            case BucketVersionViewModel.BucketType.MonthlyExpense:
                _isNumberOfMonthsEnabled = false;
                _isAmountEnabled = true;
                _isTargetDataEnabled = false;
                break;
            case BucketVersionViewModel.BucketType.ExpenseEveryXMonths:
                _isNumberOfMonthsEnabled = true;
                _isAmountEnabled = true;
                _isTargetDataEnabled = true;
                break;
            case BucketVersionViewModel.BucketType.SaveXUntilYDate:
                _isNumberOfMonthsEnabled = false;
                _isAmountEnabled = true;
                _isTargetDataEnabled = true;
                break;
            default:
                _isNumberOfMonthsEnabled = true;
                _isAmountEnabled = true;
                _isTargetDataEnabled = true;
                break;
        }
    }
    
    void BucketGroup_SelectionChanged(string? value)
    {
        if (string.IsNullOrEmpty(value)) return;
        DataContext.SelectedBucketGroup = DataContext.AvailableBucketGroups!.First(i => i.Id == Guid.Parse(value));
    }
}
